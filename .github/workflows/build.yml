name: Build Executable

on:
  push:
    branches:
      - Seconde-Partie
  workflow_dispatch: # Permet de déclencher le workflow manuellement
    inputs:
      python_version:
        description: "Version de Python à utiliser"
        required: false
        default: "3.10"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.10]

    steps:
    # Étape 1 : Checkout du code
    - name: Checkout code
      uses: actions/checkout@v3

    # Étape 2 : Configurer Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Étape 3 : Installer les dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Étape 4 : Installer PyInstaller
    - name: Install PyInstaller
      run: pip install pyinstaller

    # Étape 5 : Compiler le projet
    - name: Build with PyInstaller
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          pyinstaller --onefile --add-data "img/skins/*:img/skins" main.py
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          pyinstaller --onefile --add-data "img/skins/*:img/skins" main.py
          # Créer une archive tar.gz sur macOS
          tar -czvf dist/main.tar.gz -C dist main
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          pyinstaller --onefile --add-data "img/skins/*;img/skins" main.py
        fi

    # Étape 6 : Sauvegarder l'exécutable comme artefact
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: executable-${{ matrix.os }}
        path: |
          dist/main
          dist/main.tar.gz  # Inclure le tar.gz pour macOS
