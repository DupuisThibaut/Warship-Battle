name: Build Executable for Multiple Platforms

on:
  push:
    branches:
      - Seconde-Partie
  workflow_dispatch: # Permet de déclencher le workflow manuellement
    inputs:
      python_version:
        description: "Version de Python à utiliser"
        required: false
        default: "3.10"

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build for macOS
      run: |
        pyinstaller --onefile --add-data "img/skins/*:img/skins" main.py

    # Créer une archive tar qui préserve les permissions
    - name: Create tar archive for macOS
      run: |
        tar -czf dist/main-macos.tar.gz -C dist main

    - name: Upload macOS executable as artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-executable
        path: dist/main-macos.tar.gz

    - name: Create Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: dist/main-macos.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build for Linux
      run: |
        pyinstaller --onefile --add-data "img/skins/*:img/skins" main.py
        chmod +x dist/main  # Ajoute la permission d'exécution

    - name: Upload Linux executable as artifact
      uses: actions/upload-artifact@v3
      with:
        name: linux-executable
        path: dist/main

    - name: Create Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: dist/main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build for Windows
      run: |
        pyinstaller --onefile --add-data "img/skins/*:img/skins" main.py

    # Créer une archive tar pour Windows
    - name: Create tar archive for Windows
      run: |
        tar -czf dist/main-windows.tar.gz -C dist main.exe

    - name: Upload Windows executable as artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: dist/main-windows.tar.gz

    - name: Create Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: dist/main-windows.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
